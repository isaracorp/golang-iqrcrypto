#!/bin/bash

# Exit on error
set -e

# Show commands
set -x

if [ -z "${IQR_TOOLKIT_PATH}" ]; then
echo "IQR_TOOLKIT_PATH not defined."
  exit 1
fi

# Set the IQR toolkit path.
#export IQR_TOOLKIT_PATH=
export CGO_ENABLED=1
export CGO_CPPFLAGS=-I$IQR_TOOLKIT_PATH
export CGO_LDFLAGS=$IQR_TOOLKIT_PATH/lib_x86_64/libiqr_toolkit.a

# Generate self-signed classic cert.
$OPENSSL req -x509 -subj "/C=CA/ST=ON/L=Waterloo/O=ISARA/CN=fake_root.com" -newkey rsa:2094 -keyout root_classic.pem -out root_classic_cert.pem -days 365 -nodes

# Generate root dilithium key
$OPENSSL genpkey -engine $ENGINE -algorithm dilithium -pkeyopt parameter_set:Dilithium_III_SHAKE_r2 -out root_dilithium_priv.pem

# Generate the hybrid root cert.
# Note: root_dilithium_priv.pem will be overwritten to include the classic private key.
$OPENSSL x509QSDirectExtend -engine $ENGINE -x509in root_classic_cert.pem -x509out root_hybrid_cert.pem -privin root_classic.pem -privqs root_dilithium_priv.pem -self_sign

# Generate classic key and csr
$OPENSSL req -new -newkey rsa:2048 -nodes -subj "/C=CA/ST=ON/L=Waterloo/O=ISARA/CN=fake_server.com" -keyout server.key -out server.csr

# Generate dilithium key
$OPENSSL genpkey -engine $ENGINE -algorithm dilithium -pkeyopt parameter_set:Dilithium_III_SHAKE_r2 -out dilithium_priv.pem

# Extract the dilithium public key
$OPENSSL pkey -engine $ENGINE -in dilithium_priv.pem -pubout -out dilithium_pub.pem

# Extended classic CSR with the Dilithium key
# Note: dilithium_priv.pem will be overwritten to include the classic private key.
$OPENSSL reqQSExtend -engine $ENGINE -reqin server.csr -reqout server_hybrid.csr -privin server.key -pubqs dilithium_pub.pem -privqs dilithium_priv.pem

# Sign the hybrid CSR using classic root key.
$OPENSSL x509 -req -days 360 -in server_hybrid.csr -CA root_classic_cert.pem -CAkey root_classic.pem -CAcreateserial -out server_classic.crt -sha256

# Extend the server cert with root server dilithium key
$OPENSSL x509QSExtend -engine $ENGINE -x509in server_classic.crt -x509out server_hybrid.crt -reqin server_hybrid.csr -privqs root_dilithium_priv.pem

# Verify RSA sub-chain
$OPENSSL verify -engine $ENGINE -CAfile root_hybrid_cert.pem server_hybrid.crt

# Verify Dilithium sub-chain
$OPENSSL x509QSVerify -engine $ENGINE -root root_hybrid_cert.pem -cert server_hybrid.crt


#######################
# HSS Certificate
#######################

# Generate root HSS key
$OPENSSL genpkey -engine $ENGINE -algorithm hss -pkeyopt state_filename:root_hss_state.bin -pkeyopt sign_operations:2E20 -pkeyopt optimization:fast -pkeyopt strategy:full -out root_hss_priv.pem

# Generate the hybrid root cert.
# Note: root_hss_priv.pem will be overwritten to include the classic private key.
$OPENSSL x509QSDirectExtend -engine $ENGINE -x509in root_classic_cert.pem -x509out root_hybrid_hss_cert.pem -privin root_classic.pem -privqs_engine -privqs root_hss_priv.pem::root_hss_state.bin -self_sign

# Extend the server cert with root server HSS key
$OPENSSL x509QSExtend -engine $ENGINE -x509in server_classic.crt -x509out server_hybrid_hss.crt -reqin server_hybrid.csr -privqs_engine -privqs root_hss_priv.pem::root_hss_state.bin

# Verify RSA sub-chain
$OPENSSL verify -engine $ENGINE -CAfile root_hybrid_hss_cert.pem server_hybrid_hss.crt

# Verify HSS sub-chain
$OPENSSL x509QSVerify -engine $ENGINE -root root_hybrid_hss_cert.pem -cert server_hybrid_hss.crt

# Run the test case.
go run .

echo === Golang Passed

echo === Signing CSR generated by Golang using classic key
# Sign the hybrid CSR generated by Golang using classic root key.
$OPENSSL x509 -req -days 360 -in golang_hybrid_csr.pem -CA root_classic_cert.pem -CAkey root_classic.pem -CAcreateserial -out golang_classic.crt -sha256

echo === Signing CSR generated by Golang using HSS key
# Extend the server cert with root server HSS key
$OPENSSL x509QSExtend -engine $ENGINE -x509in golang_classic.crt -x509out golang_hybrid.crt -reqin golang_hybrid_csr.pem -privqs_engine -privqs root_hss_priv.pem::root_hss_state.bin

echo Passed

rm *.pem *.crt *.csr *.srl *.key *.bin
